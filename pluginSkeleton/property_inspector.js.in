// Parts of this code were copied from
// https://github.com/elgatosf/streamdeck-pisamples/blob/master/Sources/com.elgato.pisamples.sdPlugin/index_pi.js

// This is our global websocket, used to communicate from/to Stream Deck software
// and some info about our plugin, as sent by Stream Deck software
var websocket = null;
var uuid = null;
var actionInfo = {};
var inInfo = {};
var settings = {};
var isQT = navigator.appVersion.includes('QtWebEngine');
var onchangeevt = 'onchange';

function connectElgatoStreamDeckSocket (inPort, inUUID, inRegisterEvent, inInfo, inActionInfo) {
	let currentDate = new Date();
	console.log("Connecting property inspector");
	console.log(currentDate)

    uuid = inUUID;
    // please note: the incoming arguments are of type STRING, so
    // in case of the inActionInfo, we must parse it into JSON first
    actionInfo = JSON.parse(inActionInfo); // cache the info
    inInfo = JSON.parse(inInfo);
    websocket = new WebSocket('ws://127.0.0.1:' + inPort);

    /**
	 * Since the property inspector doesn't have access to your OS native settings
     * Stream Deck sends some color settings to PI
     * We use these to adjust some styles (e.g. highlight-colors for checkboxes)
     */
    addDynamicStyles(inInfo.colors, 'connectElgatoStreamDeckSocket');
    
    // if connection was established, the websocket sends
    // an 'onopen' event, where we need to register our property inspector
    websocket.onopen = function () {
        var registerJson = {
            "event": inRegisterEvent,
            "uuid": uuid
        };
        // register property inspector to Stream Deck
        websocket.send(JSON.stringify(registerJson));

		// request global settings
		var settingsJson = {
			"event": "getSettings",
			"context": uuid
		};
		websocket.send(JSON.stringify(settingsJson));
    };

    websocket.onmessage = function (evt) {
        // Received message from Stream Deck
        var jsonObj = JSON.parse(evt.data);
        var eventName = jsonObj['event'];

		console.log("received event", jsonObj)
		if (eventName == "didReceiveSettings") {
			settings = jsonObj["payload"]["settings"];
			console.log("Received settings:")
			console.log(settings);

			init(actionInfo["action"]);
		}
    };

	setupUI();
}


function setupUI() {
	var actionID = actionInfo["action"]

	prepareBlocksFor(actionID);
}

function getSettingsKey(element) {
	if (element.hasAttribute("settings_key")) {
		return element.getAttribute("settings_key");
	}

	return element.getAttribute("id");
}

/**
 * Prepares the blocks under the "main-container" to match the action with the given ID.
 * This includes hiding unnecessary elements as well as potentially setting up required
 * event handlers.
 *
 * @param actionID The ID to match against
 */
function prepareBlocksFor(actionID) {
	var mainContainer = document.getElementById("main-container");
	var actionBlocks = mainContainer.children;

	for (var i = 0; i < actionBlocks.length; i++) {
		var currentActionBlock = actionBlocks[i];

		if (currentActionBlock.id === actionID) {
			// Show this block
			currentActionBlock.style.display = "block";

			let inputElements = currentActionBlock.getElementsByTagName("input");

			for (let k = 0; k < inputElements.length; k++) {
				let currentElement = inputElements[k];

				console.log(currentElement);

				// install a onchange event handler that saves the value of
				// this input field as a setting
				currentElement.addEventListener(
					"change",
					function() {
						key = getSettingsKey(currentElement);
						value = currentElement.value;

						console.log("Saving setting for ", key, ": ", value);
						// Set the passed value
						settings[key] = value;

						saveSettings();
					});
			}
		} else {
			// Hide this block
			currentActionBlock.style.display = "none";
		}
	}
}

/**
 * Initializes the fields belonging to the block corresponding to
 * the given action ID.
 */
function init(actionID) {
	switch (actionID) {
		case "${MUMBLE_STREAMDECK_JOIN_CHANNEL_ACTION_UUID}":
			initJoinChannelAction();
			break;
	}
}

function initJoinChannelAction() {
	let channelNameElement = document.getElementById("join_channel__channel_name");
	let channelPasswordElement = document.getElementById("join_channel__channel_password");

	var channelName = settings[getSettingsKey(channelNameElement)];
	var channelPassword = settings[getSettingsKey(channelPasswordElement)];

	if (channelName !== undefined) {
		channelNameElement.value = channelName;
	}
	if (channelPassword !== undefined) {
		channelPasswordElement.value = channelPassword;
	}
}

function saveSettings() {
	console.log("Saving settings: ", JSON.stringify(settings));

	let payload = {
		"settings": settings
	};

	var json = {
		"action": actionInfo["action"],
		"event": "sendToPlugin",
		"context": uuid,
		"payload": payload
	};

	console.log("Seinding to plugin ", JSON.stringify(json))

	websocket.send(JSON.stringify(json));
}

window.addEventListener("beforeunload", function(e) {
	e.preventDefault();

	var mainContainer = document.getElementById("main-container");
	var actionBlocks = mainContainer.children;

	for (var i = 0; i < actionBlocks.length; i++) {
		var currentActionBlock = actionBlocks[i];
			
		if (currentActionBlock.style.display != "none") {
			// This is a visible block -> save its setting
			let inputElements = currentActionBlock.getElementsByTagName("input");

			for (let k = 0; k < inputElements.length; k++) {
				let currentElement = inputElements[k];

				key = getSettingsKey(currentElement);
				value = currentElement.value;

				console.log("Saving setting for ", key, ": ", value);
				// Set the passed value
				settings[key] = value;
			}
		}
	}

	saveSettings();
});

/////////////////////////////////////////////////////////////////////////////////
////////////////////// BOILERPLATE CODE FROM ELGATO /////////////////////////////
/////////////////////////////////////////////////////////////////////////////////


/**
 * Get a JSON property from a (dot-separated) string
 * Works on nested JSON, e.g.:
 * jsn = {
 *      propA: 1,
 *      propB: 2,
 *      propC: {
 *          subA: 3,
 *          subB: {
 *             testA: 5,
 *             testB: 'Hello'
 *          }
 *      }
 *  }
 *  getPropFromString(jsn,'propC.subB.testB') will return 'Hello';
 */
const getPropFromString = (jsn, str, sep = '.') => {
    const arr = str.split(sep);
    return arr.reduce((obj, key) =>
        (obj && obj.hasOwnProperty(key)) ? obj[key] : undefined, jsn);
};

/**
 *  Quick utility to lighten or darken a color (doesn't take color-drifting, etc. into account)
 *  Usage:
 *  fadeColor('#061261', 100); // will lighten the color
 *  fadeColor('#200867'), -100); // will darken the color
 */
function fadeColor (col, amt) {
    const min = Math.min, max = Math.max;
    const num = parseInt(col.replace(/#/g, ''), 16);
    const r = min(255, max((num >> 16) + amt, 0));
    const g = min(255, max((num & 0x0000FF) + amt, 0));
    const b = min(255, max(((num >> 8) & 0x00FF) + amt, 0));
    return '#' + (g | (b << 8) | (r << 16)).toString(16).padStart(6, 0);
}

/**
 * Stream Deck software passes system-highlight color information
 * to Property Inspector. Here we 'inject' the CSS styles into the DOM
 * when we receive this information.
 */
function addDynamicStyles (clrs, fromWhere) {
    const node = document.getElementById('#sdpi-dynamic-styles') || document.createElement('style');
    if (!clrs.mouseDownColor) clrs.mouseDownColor = fadeColor(clrs.highlightColor, -100);
    const clr = clrs.highlightColor.slice(0, 7);
    const clr1 = fadeColor(clr, 100);
    const clr2 = fadeColor(clr, 60);
    const metersActiveColor = fadeColor(clr, -60);

    node.setAttribute('id', 'sdpi-dynamic-styles');
    node.innerHTML = `
    input[type="radio"]:checked + label span,
    input[type="checkbox"]:checked + label span {
        background-color: ${clrs.highlightColor};
    }
    input[type="radio"]:active:checked + label span,
    input[type="radio"]:active + label span,
    input[type="checkbox"]:active:checked + label span,
    input[type="checkbox"]:active + label span {
      background-color: ${clrs.mouseDownColor};
    }
    input[type="radio"]:active + label span,
    input[type="checkbox"]:active + label span {
      background-color: ${clrs.buttonPressedBorderColor};
    }
    td.selected,
    td.selected:hover,
    li.selected:hover,
    li.selected {
      color: white;
      background-color: ${clrs.highlightColor};
    }
    .sdpi-file-label > label:active,
    .sdpi-file-label.file:active,
    label.sdpi-file-label:active,
    label.sdpi-file-info:active,
    input[type="file"]::-webkit-file-upload-button:active,
    button:active {
      background-color: ${clrs.buttonPressedBackgroundColor};
      color: ${clrs.buttonPressedTextColor};
      border-color: ${clrs.buttonPressedBorderColor};
    }
    ::-webkit-progress-value,
    meter::-webkit-meter-optimum-value {
        background: linear-gradient(${clr2}, ${clr1} 20%, ${clr} 45%, ${clr} 55%, ${clr2})
    }
    ::-webkit-progress-value:active,
    meter::-webkit-meter-optimum-value:active {
        background: linear-gradient(${clr}, ${clr2} 20%, ${metersActiveColor} 45%, ${metersActiveColor} 55%, ${clr})
    }
    `;
    document.body.appendChild(node);
};
